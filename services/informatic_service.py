from repositories.informatic_repository import InformaticsRepository, InformaticsCreate, Informatics
#import uuid 

class Counter:
    def __init__(self):
        self.value = 0

    def increment(self):
        self.value += 1
        return self.value

def get_counter():
    return Counter()

class InformaticsService:
  def __init__(self):
    self.informatics = []
    self.counter = get_counter()

  def create_informatic(self, informatic: InformaticsCreate) -> Informatics:
    # unique_ids generated by uuid module?
    #new_informatic = informatics(id=uuid.uuid4().time, **informatic.model_dump())
    new_informatic = Informatics(id=self.counter.increment(), **informatic.model_dump())
    self.informatics.append(new_informatic)
    return new_informatic

  def get_informatics(self) -> list[Informatics]:
    return self.informatics

  def get_informatic(self, informatic_id: int) -> Informatics | None:
    for informatic in self.informatics:
      if informatic.id == informatic_id:
        return informatic
    return None

  def update_informatic(self, informatic_id: int, updated_informatic: InformaticsCreate) -> Informatics | None:
    for informatic in self.informatics:
      if informatic.id == informatic_id:
        informatic.resource = updated_informatic.resource
        informatic.description = updated_informatic.description
        informatic.has_api = updated_informatic.has_api
        informatic.requires_key = updated_informatic.requires_key
        return informatic
    return None

  def delete_informatic(self, informatic_id: int) -> bool:
    for index, informatic in enumerate(self.informatics):
      if informatic.id == informatic_id:
        del self.informatics[index]
        return True
    return False